// Generated by CoffeeScript 1.8.0
(function() {
  var RSVP, httpSync, pluralize, url, _;

  RSVP = require('rsvp');

  _ = require('underscore');

  httpSync = require('http-sync');

  url = require('url');

  pluralize = require('pluralize');

  module.exports = function(data) {
    return new RSVP.Promise(function(resolve) {
      var urlCount;
      _(data.prs).each(function(pr) {
        var matches;
        pr.urls = [];
        matches = pr.body.match(/(https?:\/\/)([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?\b/g);
        matches = _(matches).map((function(_this) {
          return function(mediaUrl) {
            var match, req;
            match = mediaUrl.match(/^http:\/\/cl\.ly/);
            if (match != null) {
              mediaUrl = mediaUrl.replace(/[a-zA-Z]\.[a-z]*$/, '');
              req = httpSync.request({
                protocol: url.parse(mediaUrl).protocol,
                host: url.parse(mediaUrl).host,
                path: url.parse(mediaUrl).pathname,
                headers: {
                  Accept: 'application/json'
                }
              });
              return JSON.parse(req.end().body.toString()).remote_url;
            } else {
              return mediaUrl;
            }
          };
        })(this));
        if (matches != null) {
          return pr.urls = pr.urls.concat(matches);
        }
      });
      urlCount = _(data.prs).reduce(function(value, pr) {
        return value + pr.urls.length;
      }, 0);
      console.log(("\n  " + urlCount + " " + (pluralize('URL', urlCount)) + " found:").green);
      _(data.prs).each(function(pr) {
        return _(pr.urls).each(function(url) {
          return console.log(("    " + url).grey);
        });
      });
      return resolve(data);
    });
  };

}).call(this);
