// Generated by CoffeeScript 1.8.0
(function() {
  var $, RSVP, cloupAppRegexp, filenameRegexp, httpSync, pluralize, url, urlRegexp, _;

  RSVP = require('rsvp');

  _ = require('underscore');

  httpSync = require('http-sync');

  url = require('url');

  pluralize = require('pluralize');

  $ = require('cheerio');

  urlRegexp = /(https?:\/\/)([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?\b/g;

  filenameRegexp = /\/[^\/]*\.[a-z]*$/;

  cloupAppRegexp = /^http:\/\/cl\.ly/;

  module.exports = function(data) {
    return new RSVP.Promise(function(resolve) {
      var fileCount;
      _(data.prs).each(function(pr) {
        var matches;
        pr.files = [];
        matches = pr.body.match(urlRegexp);
        matches = _(matches).map((function(_this) {
          return function(mediaUrl) {
            var req;
            if (mediaUrl.match(cloupAppRegexp)) {
              mediaUrl = mediaUrl.replace(filenameRegexp, '');
              req = httpSync.request({
                protocol: url.parse(mediaUrl).protocol,
                host: url.parse(mediaUrl).host,
                path: url.parse(mediaUrl).pathname,
                headers: {
                  Accept: 'application/json'
                }
              });
              mediaUrl = JSON.parse(req.end().body.toString()).remote_url;
              return {
                url: mediaUrl,
                name: pr.number + '__' + mediaUrl.match(filenameRegexp)[0].slice(1)
              };
            } else if (mediaUrl.match(filenameRegexp) != null) {
              return {
                url: mediaUrl,
                name: pr.number + '__' + mediaUrl.match(filenameRegexp)[0].slice(1)
              };
            }
          };
        })(this));
        if (matches != null) {
          matches = _(matches).without(void 0);
          return pr.files = pr.files.concat(matches);
        }
      });
      fileCount = _(data.prs).reduce(function(value, pr) {
        return value + pr.files.length;
      }, 0);
      console.log(("\n  " + fileCount + " " + (pluralize('URL', fileCount)) + " found:").green);
      _(data.prs).each(function(pr) {
        return _(pr.files).each(function(file) {
          return console.log(("    " + file.url).grey);
        });
      });
      return resolve(data);
    });
  };

}).call(this);
